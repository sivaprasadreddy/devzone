#!groovy

def DOCKER_USERNAME = 'sivaprasadreddy'
def DOCKER_IMAGE_NAME = 'devzone-slim'

node {

    try {
        stage('Checkout') {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                      doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],
                      userRemoteConfigs: [[url: 'https://github.com/sivaprasadreddy/devzone.git']]])
        }

        stage('Build') {
            try {
                sh './gradlew clean build'
            } finally {
                junit allowEmptyResults: true, testResults: 'target/test-results/test/*.xml'
                junit allowEmptyResults: true, testResults: 'target/test-results/integrationTest/*.xml'
                publishHTML(target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'target/jacoco/test',
                    reportFiles          : 'index.html',
                    reportName           : "Jacoco Unit Test Report"
                ])
                publishHTML(target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'target/jacoco/integrationTest',
                    reportFiles          : 'index.html',
                    reportName           : "Jacoco Integration Test Report"
                ])
            }
        }

        stage('Publish Docker Image') {
            sh "./gradlew bootBuildImage -Dspring-boot.build-image.imageName=${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
            if(env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'main') {
                echo "Publishing to dockerhub DOCKER_USERNAME=${DOCKER_USERNAME}, APPLICATION_NAME=${DOCKER_IMAGE_NAME}"
                def appImage = docker.build("${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}")
                appImage.push()
                appImage.push('latest')
            } else {
                echo "Skipping Publish Docker Image"
            }
        }

    }
    catch(err) {
        echo "ERROR: ${err}"
        currentBuild.result = currentBuild.result ?: "FAILURE"
    }
}

plugins {
    id "java"
    id "jacoco"
    id "org.springframework.boot" version "3.0.1"
    id "io.spring.dependency-management" version "1.1.0"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "com.google.cloud.tools.jib" version "3.3.1"
    id "com.diffplug.spotless" version "6.12.0"
    id "org.sonarqube" version "3.5.0.2730"
}

group = "com.sivalabs"
version = "0.0.1"
sourceCompatibility = '17'
archivesBaseName = "devzone"

/*java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}*/

def dockerImageName = "sivaprasadreddy/devzone"
def dockerImageTags = ["latest", "${project.version}"]
def dockerBaseImage = "eclipse-temurin:17.0.5_8-jre-focal"
def appMainClass = "com.sivalabs.devzone.Application"
def jacocoToolVersion = "0.8.8"
def jacocoMinCoverageRequired = 0.30
def googleJavaFormatToolVersion = "1.12.0"
def jacocoExcludes = [
    "com/sivalabs/devzone/*Application.*",
]

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    set("spring_cloud_version", "2021.0.5")
    set("testcontainers_version", "1.17.6")
    set("webjars_locator_version", "0.46")
    set("bootstrap_version", "5.2.3")
    set("jquery_version", "3.6.3")
    set("font_awesome_version", "6.2.0")
    set("commons_lang_version", "3.12.0")
    set("commons_io_version", "2.11.0")
    set("springdoc_openapi", "1.6.14")
    set("opencsv_version", "5.7.1")
    set("jsoup_version", "1.15.3")
    set("datasource_proxy_version", "1.8.1")
    set("archunit_junit5_version", "1.0.1")
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity6"
    implementation "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect"

    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springdoc:springdoc-openapi-ui:${springdoc_openapi}"
    implementation "com.opencsv:opencsv:${opencsv_version}"
    implementation "org.jsoup:jsoup:${jsoup_version}"
    implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
    implementation "commons-io:commons-io:${commons_io_version}"
    implementation "org.flywaydb:flyway-core"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "io.micrometer:micrometer-registry-prometheus"
    runtimeOnly "org.postgresql:postgresql"
    implementation "com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:${datasource_proxy_version}"

    implementation "org.webjars:webjars-locator:${webjars_locator_version}"
    implementation "org.webjars:bootstrap:${bootstrap_version}"
    implementation "org.webjars:jquery:${jquery_version}"
    implementation "org.webjars:font-awesome:${font_awesome_version}"

    developmentOnly "org.springframework.boot:spring-boot-devtools"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunit_junit5_version}"
    testImplementation "com.apptasticsoftware:rssreader:3.2.5"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainers_version}"
    }
}

bootBuildImage {
    imageName = dockerImageName
    tags = dockerImageTags
}

jib {
    from {
        image = dockerBaseImage
    }
    to {
        image = dockerImageName
        tags = dockerImageTags
    }
    container {
        jvmFlags = ["-Xms512m", "-Xdebug"]
        mainClass = appMainClass
        args = []
        ports = ["8080/tcp"]
    }
}

if (project.hasProperty("dev")) {
    bootRun {
        args = ["--spring.profiles.active=dev"]
    }
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch",
            "git.commit.id.abbrev",
            "git.commit.user.name",
            "git.commit.message.full"]
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat(googleJavaFormatToolVersion)
            .aosp()
            .reflowLongStrings()
            .groupArtifact("com.google.googlejavaformat:google-java-format")

    }
}

test {
    useJUnitPlatform()
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

test.dependsOn(spotlessCheck)

jacoco {
    toolVersion = jacocoToolVersion
}

jacocoTestReport {
    executionData tasks.withType(Test)
    classDirectories.from = files(sourceSets.main.output.classesDirs)
    sourceDirectories.from = files(sourceSets.main.java.srcDirs)

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }

    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn "test"
    executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")

    violationRules {
        rule {
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = jacocoMinCoverageRequired
            }
            excludes = jacocoExcludes
        }
    }
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

file("sonar-project.properties").withReader {
    Properties sonarProperties = new Properties()
    sonarProperties.load(it)

    sonarProperties.each { key, value ->
        sonarqube {
            properties {
                property key, value
            }
        }
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${docker_compose_plugin_version}"
        classpath "org.owasp:dependency-check-gradle:${owasp_plugin_version}"
    }
}

plugins {
    id "java-library"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id "com.gorylenko.gradle-git-properties"
    id "com.github.ben-manes.versions"
    id "com.github.sherter.google-java-format"
    id "com.github.spotbugs" apply false
    id "org.sonarqube" apply false
    id "org.owasp.dependencycheck" apply false
}
apply plugin: "idea"
apply plugin: "docker-compose"
apply from: "gradle/code-quality.gradle"
apply from: "gradle/owasp.gradle"

group = "com.sivalabs"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity5"
    implementation "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect"

    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "io.jsonwebtoken:jjwt:${jjwt_version}"
    implementation "org.zalando:problem-spring-web-starter:${problem_spring_web_version}"

    implementation "org.flywaydb:flyway-core"
    compileOnly "org.projectlombok:lombok"
    testImplementation "org.projectlombok:lombok"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "io.micrometer:micrometer-registry-prometheus"
    runtimeOnly "org.postgresql:postgresql"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.projectlombok:lombok"

    implementation "io.springfox:springfox-boot-starter:${swagger_version}"

    implementation "org.webjars:bootstrap:${wj_bootstrap_version}"
    implementation "org.webjars:font-awesome:${wj_fontawesome_version}"
    implementation "org.webjars:vue:${wj_vue_version}"

    implementation "com.opencsv:opencsv:${opencsv_version}"
    implementation "org.jsoup:jsoup:${jsoup_version}"
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:${p6spy_version}"
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasypt_version}"
    implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
    implementation "commons-io:commons-io:${commons_io_version}"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunit_junit5_version}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainers_version}"
    }
}

springBoot {
    buildInfo()
}

bootJar {
    //launchScript()
}
//bootBuildInfo.mustRunAfter processResources
bootBuildImage {
    imageName = "sivaprasadreddy/devzone-api-springboot"
}

//dockerCompose.isRequiredBy(test)
dockerCompose {
    useComposeFiles = ["docker/docker-compose.yml"]
    //isRequiredBy(project.tasks.test)
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

bootRun {
    args = ["--spring.profiles.active=dev"]
}
bootRun.dependsOn composeUp

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

googleJavaFormat {
    options style: 'AOSP'
}

check.dependsOn verifyGoogleJavaFormat

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntegrationTest*"
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        //showStandardStreams = true
        exceptionFormat = "full"
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()

    include "**/*IT*", "**/*IntegrationTest*"
    shouldRunAfter test

    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        //showStandardStreams = true
        exceptionFormat = "full"
    }
}

check.dependsOn integrationTest

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

wrapper {
    gradleVersion = "6.7.1"
}

plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'com.gorylenko.gradle-git-properties' version "2.4.1"
    id 'com.google.cloud.tools.jib' version "3.2.1"
    id 'com.diffplug.spotless' version "6.10.0"
    id 'org.sonarqube' version "3.0"
}

def jacocoToolVersion = "0.8.8"
def jacocoMinCoverageRequired = 0.30
def googleJavaFormatToolVersion = "1.12.0"

group = "com.sivalabs"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('spring_cloud_version', "2021.0.3")
    set('awspring_version', "2.4.2")
    set('testcontainers_version', "1.17.3")
    set('webjars_locator_version', "0.45")
    set('bootstrap_version', "5.2.0")
    set('jquery_version', "3.6.0")
    set('font_awesome_version', "6.1.2")
    set('commons_lang_version', "3.12.0")
    set('commons_io_version', "2.11.0")
    set('problem_spring_web_version', "0.26.2")
    set('jjwt_version', "0.9.1")
    set('springdoc_openapi', "1.6.9")
    set('opencsv_version', "5.6")
    set('jsoup_version', "1.15.2")
    set('p6spy_version', "1.8.0")
    set('flexypool_version', "1.8.0")
    set('archunit_junit5_version', "0.23.1")
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity5"
    implementation "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect"

    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "io.jsonwebtoken:jjwt:${jjwt_version}"
    implementation "org.zalando:problem-spring-web-starter:${problem_spring_web_version}"
    implementation "org.springdoc:springdoc-openapi-ui:${springdoc_openapi}"
    implementation "com.opencsv:opencsv:${opencsv_version}"
    implementation "org.jsoup:jsoup:${jsoup_version}"
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:${p6spy_version}"
    implementation("com.github.gavlyukovskiy:flexy-pool-spring-boot-starter:${flexypool_version}")
    implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
    implementation "commons-io:commons-io:${commons_io_version}"
    implementation "org.flywaydb:flyway-core"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "io.micrometer:micrometer-registry-prometheus"
    runtimeOnly "org.postgresql:postgresql"

    implementation "org.webjars:webjars-locator:${webjars_locator_version}"
    implementation "org.webjars:bootstrap:${bootstrap_version}"
    implementation "org.webjars:jquery:${jquery_version}"
    implementation "org.webjars:font-awesome:${font_awesome_version}"

    compileOnly "org.projectlombok:lombok"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.projectlombok:lombok"

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "org.projectlombok:lombok"
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunit_junit5_version}"
    testImplementation "com.apptasticsoftware:rssreader:3.0.0"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainers_version}"
    }
}

bootBuildImage {
    imageName = "sivaprasadreddy/devzone"
}

if (project.hasProperty("dev")) {
    bootRun {
        args = ["--spring.profiles.active=dev"]
    }
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch",
            "git.commit.id.abbrev",
            "git.commit.user.name",
            "git.commit.message.full"]
}

jib {
    from {
        image = 'eclipse-temurin:17-jre-focal'
    }
    to {
        image = 'sivaprasadreddy/video-library'
        tags = ['latest']
    }
    container {
        jvmFlags = ['-Xms512m', '-Xdebug']
        mainClass = 'com.sivalabs.devzone.DevZoneApplication'
        args = []
        ports = ['8080/tcp']
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat(googleJavaFormatToolVersion)
            .aosp()
            .reflowLongStrings()
            .groupArtifact('com.google.googlejavaformat:google-java-format')

    }
}

test {
    useJUnitPlatform()
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        showStandardStreams = true
        exceptionFormat = "full"
    }
}
jacoco {
    toolVersion = jacocoToolVersion
}

def jacocoExcludes = [
    'com/sivalabs/devzone/*Application.*',
]

jacocoTestReport {
    executionData tasks.withType(Test)
    classDirectories.from = files(sourceSets.main.output.classesDirs)
    sourceDirectories.from = files(sourceSets.main.java.srcDirs)

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }

    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn "test"
    executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = jacocoMinCoverageRequired
            }
            excludes = jacocoExcludes
        }
    }
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

file("sonar-project.properties").withReader {
    Properties sonarProperties = new Properties()
    sonarProperties.load(it)

    sonarProperties.each { key, value ->
        sonarqube {
            properties {
                property key, value
            }
        }
    }
}
